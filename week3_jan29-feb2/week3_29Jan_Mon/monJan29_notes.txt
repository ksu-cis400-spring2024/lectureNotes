Monday: Methods tutorial
Tuesday: Documentation tutorial
Friday: Milestone 2
    correction: corn dog bites kids meal is $0.75 per additional bite

--> in general, you don't have to document tutorials
(...except the documentation tutorial...)

///////////////////////////

Topics for the week:
- program memory
- objects in memory
- ways to initialize fields/properties
- enums
- decimal type
- uint type
- C# namespace vs folder structure


/////////////////////////

Sections in memory:

- static: unchanging (size of static memory does not change)
    program itself, literals, static variables 

- stack: scoped variables (global, methods, loop, conditional)
    when does the stack grow? when I enter a new scope,
        space goes on top of stack for the variables defined in that scope
    when does the stack shrink? when I leave a scope
        (all variables defined in that scope are popped off)

- heap: all dynamic memory ("new" keyword - object, array)


--> What goes on each part?


--> Can static variables change? yes 
Can static memory size change? no


Memory leak issues?




--> When does stack grow and shrink? 
    grows: entering scopes
    shrinks: exiting scopes

Is it limited in size? yes (stack overflow exception - infinite recursion)
    Is memory for ALL value types on the stack? no 
        fields of an object on the heap
        static value types in static memory



--> Is ALL memory for reference types on the heap? Is it limited in size?
    When is memory released?


yes - out of memory exception

released: by the garbage collector (when that memory no longer referenced
by anything on stack/static)


//////////////////////////

--> see Person.cs 

--> want Bob, age 20, lives at 123 Fake St in MadeUp, KS

--> how could we create this? What happens in memory?

Address p = new Person("Bob", 20);

--> what happens in memory?

--> does it make a difference if "p" is a field/property vs a local variable?


////////////////////////

Ways to initialize fields/properties at time object is created.

(See Person class)


////////////////////////

When can we do this?

    ClassName obj = new ClassName();

////////////////////////

enums.

public enum SomeName 
{
    Value1, Value2, ...
}



--> are really ints (0, 1, 2, ...). Can be cast to ints in this way.


public enum Soda
{
    Sprite,
    DrPepper,
    DietCoke,
    Coke   
}

--> declare an enum variable, set to Sprite

Soda s = Soda.Sprite;


--> print it (use an interpolated string). What prints?

//I am drinking Sprite

$"text {variable} "

s.ToString()

Console.WriteLine($"I am drinking {s}");


--> what if it had the value DrPepper? What would print?

--> how to loop through all enum values?

foreach (Soda s in Enum.GetValues(typeof(Soda))) {

}


////////////////////////////////

- decimal type

decimal - currency



- uint type



- C# namespace vs folder structure

