Milestone 11: due Friday


Next week: POST requests, cloud workspaces (Gitpod.io)
    one more milestone (#12)
    Next Monday: review for final
    Next Wednesday/Friday: work days (and get MS12 checked off)


Final exam:
    1:30 section: Monday, May 6 11:50 am - 1:40 pm
    2:30 section: Wednesday, May 8 4:10-6:00 pm

    - it will NOT cover XAML, Razor pages, HTML/CSS
    - it will emphasize OOP topics
    - only new material since exam 2 is LINQ queries


--> Website competition



////////////////////////

//suppose items is an IEnumerable<SomeType>


IEnumerable<SomeType> keep = items.Where(item => (some condition about item));


Or could write:
IEnumerable<SomeType> keep = from item in items 
                        where (some condition about item)
                        select item;



//////////////////////

Example: write method that takes an IEnumerable<Person> (each Person has Name, Age),
minAge, maxAge, firstLetter

Return collection of people whose name begins with that letter and age is in
the specified range

public IEnumerable<Person> Filter(IEnumerable<Person> allPeople, uint minAge,
                                uint maxAge, char firstLetter)
{
    return allPeople.Where(p => p.Age >= minAge && p.Age <= maxAge && 
                    p.Name[0] == firstLetter);

}


from p in allPeople
where p => p.Age >= minAge && p.Age <= maxAge && p.Name[0] == firstLetter
select p;


////////////////////

Example (suppose Employee, Student both extend Person)

write method that takes an IEnumerable<Person> 

Return collection of people who are students



public IEnumerable<Person> Filter(IEnumerable<Person> allPeople) {

    return allPeople.Where(p => p is Student);
}



////////////////////

Example: how to revise above method to put in alphabetical order by name?


public IEnumerable<Person> Filter(IEnumerable<Person> allPeople) {

    return allPeople.Where(p => p is Student).OrderBy(p => p.Name);
}




////////////////////

Why LINQ instead of manual?

will combine into one, is more efficient




////////////////////

Milestone 11 testing.

- price filter (min/max price):
    test correct if both null -> shouldn't filter anything
    test correct if just one null 
    test correct if given both min/max: 
        make sure each item in the result's price is in the correct range
        make sure each item in menu whose price is in that range is in the result


- cals filter (min/max cals):
    test correct if both null -> shouldn't filter anything
    test correct if just one null 
    test correct if given both min/max: 
        make sure each item in the result's cals is in the correct range
        make sure each item in menu whose cals is in that range is in the result



- keyword filter (big string that is all the keywords):
    test correct if null or empty -> shouldn't filter anything

    test actual keywords
        Option 1) Try searching the whole menu
        Option 2) Create your own smaller menu

            keywords to test: one word, multiple keywords,
                "small beans xyz" - make sure no results
                "small beans" - make sure no other small menu items
                test with all uppercase
                test with mixed case



///////////////////

Milestone 11 UML:

    Index
    Static Menu