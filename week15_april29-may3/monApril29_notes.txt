General announcements:
- NO late work accepted after Friday, May 3 (includes milestones and tutorials)
- Milestone 12 must be checked off in class or office hours (not Canvas)
- Website design competition - submit new release by Friday, 
    winner gets Chipotle or Qdoba gift card


Tutorial 1: POST requests and JSON (due today)
    - use POST requests for more security, to send more info, 
        when changing underlying data
    - can use JSON to simulate an external database
    - deserialize from JSON into objects when your application starts
    - serialize objects to JSON when a change is made
    - (in practice, you would use an external database for a web application)


Tutorial 2: Cloud workspaces (due Tuesday)
    - create Gitpod.io account
        (really useful for group projects and to be able to work from 
        multiple locations)
    - link to movie databases repo
    - with a few changes in settings, can launch app from Gitpod
    - (while running, will be publicly available)


Milestone 12 (due Friday, May 3)
    - Add a reviews link to your website
    - Should load previous reviews (sorted with newest on top)
    - User can add new reviews
    - All reviews are stored in JSON
    - Host build your bowl repo on Gitpod.io
    - To "submit": demo in class or office hours
        - show launching your web app from Gitpod
        - show adding a couple of reviews (with newest on top)
        - show closing web app, launching again - reviews should still be there

For reviews:
- Create a data class for each review (string Text, DateTime PlacedAt)
- Create static ReviewDatabase class to load/add reviews
- Deserialize JSON to a List of those reviews
- When displaying reviews, will want to use OrderByDescending on the PlacedAt
    property

--> you can have a Reviews property in your PageModel that gets the result
    of a LINQ query that orders the ReviewDatabase reviews by PlacedAt



--> see milestone 12 demo


///////////////////

Final exam.
    1:30 section - Monday, May 6 11:50 am - 1:40 pm (usual lab room)
    2:30 section - Wednesday, May 8 4:10-6:00 pm (usual lab room)

Format.
    Paper-based, closed notes, closed computers.
    Multiple choice followed by open-ended.
    Similar format as midterms

--> be familiar with all vocabulary terms

--> I highly recommend reviewing exams 1 and 2 and their practice exams




For open-ended:
- Implementing a class, including fields/properties/methods/constructors  

- Writing and implementing an interface

- Using inheritance and abstract classes
    --> rules when extending a class? constructors?

        public class Two : One {
            //if One has anything abstract, I have to
            //provide implementation details (use "override")

            //OR, could inherit as abstract but would need to declare
            //Two as abstract
        }

    --> rules when extending an abstract class?

    public class Two : One {
        public Two(int d) : base(d) {

        }
    }

    public class One {
        private int _num;

        public One(int n) {
            _num = n;
        }
    }


- Enforcing the bounds of a property

    private backing field



- Creating and using objects

- Drawing and interpreting UML diagrams
    --> kinds of associations?

        realization (interfaces): dashed line open arrow pointing at interface
        generalization (inheritance): solid line open arrow pointint at base class
        composition/aggregation (collections): diamond touches the collection
            include multiplicities

    private (-) public (+) protected (#)
    static - underline
    abstract - italicize




- Determining if an object has a particular type and using casting operations

    if (Object is SomeType t)



- Writing Fact and Theory xUnit tests

- Implementing and testing INotifyPropertyChanged

- Events, including custom events, custom event arguments, invoking events, 
    attaching event handlers to events, and using events to send messages 
    between objects

LINQ queries for filtering


--> No questions on XAML, Razor Pages, CSS, HTML


//////////////////////////////////


General review:


Encapsulation --> example? collecting together related pieces of information
    and functionality into a class with fields/properties/methods

Polymorphism --> example? 
    many types

    Horchata object
        Horchata, Drink, IMenuItem, object, INotifyPropertyChanged


Inheritance --> example? why? prevent code duplication
    Entree class - storing ingredients, calculating calories
        each specific entree overrides price to do it differently

        Dog extends Animal, Collie extends Dog

        Collie c = new();
        Dog d = new();
        Animal a = new();

        Collie c2 = a; //NO!!! Animals aren't necessarily collections

        d = c;          //YES!!! All collies are dogs



    different names for each class?

        parent / super / base
        child / sub / derived



    how to implement methods/properties differently?

    public class Animal {
        public virtual void Talk() { Console.WriteLine("words");}
    }

    public class Dog : Animal {
        public override void Talk() { Console.WriteLine("woof"); }
    }

    Animal d = new Dog();
    d.Talk();


    how do constructors work?



Interfaces - why?

    impose requirements on classes that implement it


Abstract classes --> how different from interfaces?
    an abstract class can have completed (non-abstract) methods/properties
    an abstract class CAN have all methods/properties complete, would just
        mean I can't instantiate it


    --> extending an abstract class


Events
Data binding
MVVM

Field
Method
Property --> difference from field? types of accessors? 
    more control over accessibility
    derived properties

    accessors: get, set, init (only use init when creating object)
    can initialize ANY property in constructor, even with no set/init

public
protected --> where visible? class itself, all of its descendents
private
static --> how do we use?

    ClassName.MethodName(...)

    if I have a class with a static method/poperty, it does NOT have to be static
    if a class is static, then everything in it is static and I can't create
        an object of it

    static constructor: called automatically the first time you use that
        static clsas


Implicit casting --> when?

    int x = 10;
    double d = x; //always OK

    Horchata h = new();
    Drink d = h;            //YES!

    d.Ice = true; //NO! Drink doesn't have Ice

    (d as Horchata).Ice = true;

Examples:






Explicit casting --> different ways. When is it needed? Example?

    (TypeName)
    as


virtual --> places used? behavior?



abstract --> places used? behavior?


override --> when can we say this?



as - what kind of thing is this? type casting


is - what kind of thing is this? type checking



enum --> know how to declare, use



public interface IInterface {
    void Method1(params);
}

public abstract class AbstractClass {
    public void FinishedMethod() {
        Console.WriteLine("is done");
    }

    public abstract void AbstractMethod(params);
}

public class ChildClass : AbstractClass, IInterface {
    public override void AbstractMethod(params) {
        Console.WriteLine("code");
    }

    public void Method1(params) {
        Console.WriteLine("done");
    }
}

<-- is the word "override" required for AbstractMethod?


ChildClass c = new ChildClass();
c.FinishedMethod(); //can we do this?

//////////////////

Look at UML of student information.

--> assume _students is already initialized

--> complete StudentRegistry members using LINQ

--> Honor roll = 3.5 and up

public IEnumerable<Student> HonorRoll {
    get {
        return _students.Where(student => student.GPA >= 3.5);

    }

}




--> search by name: see if seach string in first OR last name


--> how to write method that gets all freshmen on the honor roll?
